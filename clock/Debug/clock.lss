
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000a34  00000ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000b2  008000b2  00000b1a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001270  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d6f  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000611  00000000  00000000  000020df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000986  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00003078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002bd  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  00003595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3b       	cpi	r26, 0xB8	; 184
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 34 03 	call	0x668	; 0x668 <main>
  8a:	0c 94 18 05 	jmp	0xa30	; 0xa30 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <IntToStr>:
	case  Hour:   lcd_sendstat((u8_t*)"  24Hour"); break;
	
	}	
}

void IntToStr(u8_t number, u8_t *txt){
  92:	fb 01       	movw	r30, r22
	txt[0] = number % 10 + 48;
  94:	6a e0       	ldi	r22, 0x0A	; 10
  96:	0e 94 0c 05 	call	0xa18	; 0xa18 <__udivmodqi4>
  9a:	90 5d       	subi	r25, 0xD0	; 208
  9c:	90 83       	st	Z, r25
	txt[1] = number / 10 + 48;	
  9e:	80 5d       	subi	r24, 0xD0	; 208
  a0:	81 83       	std	Z+1, r24	; 0x01
}		
  a2:	08 95       	ret

000000a4 <get_new_time>:
	else
	t1 = 0;
}
*/

void get_new_time(){
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	00 d0       	rcall	.+0      	; 0xae <get_new_time+0xa>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	u8_t txt[2];
	
	lcd_sendcmd(nd_line);
  b2:	80 ec       	ldi	r24, 0xC0	; 192
  b4:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
	IntToStr(hour, txt);
  b8:	90 91 b6 00 	lds	r25, 0x00B6
  bc:	92 95       	swap	r25
  be:	9f 70       	andi	r25, 0x0F	; 15
  c0:	80 91 b7 00 	lds	r24, 0x00B7
  c4:	81 70       	andi	r24, 0x01	; 1
  c6:	82 95       	swap	r24
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	89 2b       	or	r24, r25
  cc:	be 01       	movw	r22, r28
  ce:	6f 5f       	subi	r22, 0xFF	; 255
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	0e 94 49 00 	call	0x92	; 0x92 <IntToStr>
	lcd_senddata(txt[1]);
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_senddata>
	lcd_senddata(txt[0]);
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_senddata>

	IntToStr(minute, txt);
  e2:	06 eb       	ldi	r16, 0xB6	; 182
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	f8 01       	movw	r30, r16
  e8:	92 91       	ld	r25, -Z
  ea:	8f 01       	movw	r16, r30
  ec:	92 95       	swap	r25
  ee:	96 95       	lsr	r25
  f0:	96 95       	lsr	r25
  f2:	93 70       	andi	r25, 0x03	; 3
  f4:	80 91 b6 00 	lds	r24, 0x00B6
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	88 0f       	add	r24, r24
  fc:	88 0f       	add	r24, r24
  fe:	89 2b       	or	r24, r25
 100:	be 01       	movw	r22, r28
 102:	6f 5f       	subi	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	0e 94 49 00 	call	0x92	; 0x92 <IntToStr>
	lcd_senddata(':');
 10a:	8a e3       	ldi	r24, 0x3A	; 58
 10c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_senddata>
	lcd_senddata(txt[1]);
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_senddata>
	lcd_senddata(txt[0]);
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_senddata>

	IntToStr(second, txt);
 11c:	f8 01       	movw	r30, r16
 11e:	80 81       	ld	r24, Z
 120:	8f 73       	andi	r24, 0x3F	; 63
 122:	be 01       	movw	r22, r28
 124:	6f 5f       	subi	r22, 0xFF	; 255
 126:	7f 4f       	sbci	r23, 0xFF	; 255
 128:	0e 94 49 00 	call	0x92	; 0x92 <IntToStr>
	lcd_senddata(':');
 12c:	8a e3       	ldi	r24, 0x3A	; 58
 12e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_senddata>
	lcd_senddata(txt[1]);
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_senddata>
	lcd_senddata(txt[0]);
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_senddata>
	
	switch ( mode ){
 13e:	80 91 b7 00 	lds	r24, 0x00B7
 142:	86 95       	lsr	r24
 144:	83 70       	andi	r24, 0x03	; 3
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	91 05       	cpc	r25, r1
 14c:	59 f0       	breq	.+22     	; 0x164 <get_new_time+0xc0>
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	91 05       	cpc	r25, r1
 152:	69 f0       	breq	.+26     	; 0x16e <get_new_time+0xca>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	91 05       	cpc	r25, r1
 158:	71 f4       	brne	.+28     	; 0x176 <get_new_time+0xd2>
	
	case  AM:     lcd_sendstat((u8_t*)"  AM    "); break;
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <lcd_sendstat>
 162:	09 c0       	rjmp	.+18     	; 0x176 <get_new_time+0xd2>
	case  PM:     lcd_sendstat((u8_t*)"  PM    "); break;
 164:	89 e6       	ldi	r24, 0x69	; 105
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <lcd_sendstat>
 16c:	04 c0       	rjmp	.+8      	; 0x176 <get_new_time+0xd2>
	case  Hour:   lcd_sendstat((u8_t*)"  24Hour"); break;
 16e:	82 e7       	ldi	r24, 0x72	; 114
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <lcd_sendstat>
	
	}	
}
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <__vector_6>:
		}
	}
}

ISR (TIMER1_COMPA_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	af 97       	sbiw	r28, 0x2f	; 47
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	cd bf       	out	0x3d, r28	; 61
    static u8_t t1 = 0;
//    _display();
	lcd_sendcmd(st_line);
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
	
	u8_t init_display[] = "Real Time clock by Sameh Afifi";
 1ba:	de 01       	movw	r26, r28
 1bc:	11 96       	adiw	r26, 0x01	; 1
 1be:	eb e7       	ldi	r30, 0x7B	; 123
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	8f e1       	ldi	r24, 0x1F	; 31
 1c4:	01 90       	ld	r0, Z+
 1c6:	0d 92       	st	X+, r0
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <__vector_6+0x40>
	u8_t temp[16];     
	u8_t size;


	// size of printed character 
	for ( size = 0; init_display[size] != '\0'; size++);
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	88 23       	and	r24, r24
 1d0:	71 f0       	breq	.+28     	; 0x1ee <__vector_6+0x6a>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	e1 e0       	ldi	r30, 0x01	; 1
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ec 0f       	add	r30, r28
 1e0:	fd 1f       	adc	r31, r29
 1e2:	e2 0f       	add	r30, r18
 1e4:	f3 1f       	adc	r31, r19
 1e6:	90 81       	ld	r25, Z
 1e8:	99 23       	and	r25, r25
 1ea:	a1 f7       	brne	.-24     	; 0x1d4 <__vector_6+0x50>
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__vector_6+0x6e>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
	
	if ( t1 <= (size - 16)){
 1f2:	40 91 b2 00 	lds	r20, 0x00B2
 1f6:	84 2f       	mov	r24, r20
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	20 51       	subi	r18, 0x10	; 16
 1fc:	30 40       	sbci	r19, 0x00	; 0
 1fe:	28 17       	cp	r18, r24
 200:	39 07       	cpc	r19, r25
 202:	34 f1       	brlt	.+76     	; 0x250 <__vector_6+0xcc>
		u8_t i;
		for ( i = t1; init_display[i] != '\0'; i++){
 204:	fe 01       	movw	r30, r28
 206:	e8 0f       	add	r30, r24
 208:	f9 1f       	adc	r31, r25
 20a:	51 81       	ldd	r21, Z+1	; 0x01
 20c:	55 23       	and	r21, r21
 20e:	b1 f0       	breq	.+44     	; 0x23c <__vector_6+0xb8>
 210:	9c 01       	movw	r18, r24
			temp[i-t1] = init_display[i];
 212:	28 1b       	sub	r18, r24
 214:	39 0b       	sbc	r19, r25
 216:	e0 e2       	ldi	r30, 0x20	; 32
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ec 0f       	add	r30, r28
 21c:	fd 1f       	adc	r31, r29
 21e:	e2 0f       	add	r30, r18
 220:	f3 1f       	adc	r31, r19
 222:	50 83       	st	Z, r21
	// size of printed character 
	for ( size = 0; init_display[size] != '\0'; size++);
	
	if ( t1 <= (size - 16)){
		u8_t i;
		for ( i = t1; init_display[i] != '\0'; i++){
 224:	4f 5f       	subi	r20, 0xFF	; 255
 226:	24 2f       	mov	r18, r20
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	e1 e0       	ldi	r30, 0x01	; 1
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ec 0f       	add	r30, r28
 230:	fd 1f       	adc	r31, r29
 232:	e2 0f       	add	r30, r18
 234:	f3 1f       	adc	r31, r19
 236:	50 81       	ld	r21, Z
 238:	55 23       	and	r21, r21
 23a:	59 f7       	brne	.-42     	; 0x212 <__vector_6+0x8e>
			temp[i-t1] = init_display[i];
		}
		
		lcd_sendstat(temp);
 23c:	ce 01       	movw	r24, r28
 23e:	80 96       	adiw	r24, 0x20	; 32
 240:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <lcd_sendstat>
		
		t1++;
 244:	80 91 b2 00 	lds	r24, 0x00B2
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	80 93 b2 00 	sts	0x00B2, r24
 24e:	09 c0       	rjmp	.+18     	; 0x262 <__vector_6+0xde>
	}
	else if ((size - 16) < 0)
 250:	33 23       	and	r19, r19
 252:	2c f4       	brge	.+10     	; 0x25e <__vector_6+0xda>
	lcd_sendstat(init_display);
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <lcd_sendstat>
 25c:	02 c0       	rjmp	.+4      	; 0x262 <__vector_6+0xde>
	else
	t1 = 0;
 25e:	10 92 b2 00 	sts	0x00B2, r1

		
	second++;
 262:	90 91 b5 00 	lds	r25, 0x00B5
 266:	89 2f       	mov	r24, r25
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	8f 73       	andi	r24, 0x3F	; 63
 26c:	90 7c       	andi	r25, 0xC0	; 192
 26e:	89 2b       	or	r24, r25
 270:	80 93 b5 00 	sts	0x00B5, r24
	if (second == 60)
 274:	8f 73       	andi	r24, 0x3F	; 63
 276:	8c 33       	cpi	r24, 0x3C	; 60
 278:	09 f0       	breq	.+2      	; 0x27c <__vector_6+0xf8>
 27a:	6a c0       	rjmp	.+212    	; 0x350 <__vector_6+0x1cc>
	{
		second = 0;
 27c:	20 91 b5 00 	lds	r18, 0x00B5
		minute++;
 280:	22 95       	swap	r18
 282:	26 95       	lsr	r18
 284:	26 95       	lsr	r18
 286:	23 70       	andi	r18, 0x03	; 3
 288:	90 91 b6 00 	lds	r25, 0x00B6
 28c:	89 2f       	mov	r24, r25
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	88 0f       	add	r24, r24
 292:	88 0f       	add	r24, r24
 294:	82 2b       	or	r24, r18
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	8f 73       	andi	r24, 0x3F	; 63
 29a:	28 2f       	mov	r18, r24
 29c:	22 95       	swap	r18
 29e:	22 0f       	add	r18, r18
 2a0:	22 0f       	add	r18, r18
 2a2:	20 7c       	andi	r18, 0xC0	; 192
 2a4:	20 93 b5 00 	sts	0x00B5, r18
 2a8:	28 2f       	mov	r18, r24
 2aa:	26 95       	lsr	r18
 2ac:	26 95       	lsr	r18
 2ae:	90 7f       	andi	r25, 0xF0	; 240
 2b0:	92 2b       	or	r25, r18
 2b2:	90 93 b6 00 	sts	0x00B6, r25
		if (minute == 60)
 2b6:	8c 33       	cpi	r24, 0x3C	; 60
 2b8:	09 f0       	breq	.+2      	; 0x2bc <__vector_6+0x138>
 2ba:	4a c0       	rjmp	.+148    	; 0x350 <__vector_6+0x1cc>
		{
			minute = 0;
 2bc:	80 91 b5 00 	lds	r24, 0x00B5
 2c0:	8f 73       	andi	r24, 0x3F	; 63
 2c2:	80 93 b5 00 	sts	0x00B5, r24
			hour++;
 2c6:	92 95       	swap	r25
 2c8:	9f 70       	andi	r25, 0x0F	; 15
 2ca:	20 91 b7 00 	lds	r18, 0x00B7
 2ce:	82 2f       	mov	r24, r18
 2d0:	81 70       	andi	r24, 0x01	; 1
 2d2:	82 95       	swap	r24
 2d4:	80 7f       	andi	r24, 0xF0	; 240
 2d6:	89 2b       	or	r24, r25
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	8f 71       	andi	r24, 0x1F	; 31
 2dc:	98 2f       	mov	r25, r24
 2de:	92 95       	swap	r25
 2e0:	90 7f       	andi	r25, 0xF0	; 240
 2e2:	90 93 b6 00 	sts	0x00B6, r25
 2e6:	38 2f       	mov	r19, r24
 2e8:	32 95       	swap	r19
 2ea:	3f 70       	andi	r19, 0x0F	; 15
 2ec:	92 2f       	mov	r25, r18
 2ee:	9e 7f       	andi	r25, 0xFE	; 254
 2f0:	93 2b       	or	r25, r19
 2f2:	90 93 b7 00 	sts	0x00B7, r25
			if(mode == AM && hour == 12){
 2f6:	96 70       	andi	r25, 0x06	; 6
 2f8:	92 30       	cpi	r25, 0x02	; 2
 2fa:	71 f4       	brne	.+28     	; 0x318 <__vector_6+0x194>
 2fc:	8c 30       	cpi	r24, 0x0C	; 12
 2fe:	e1 f4       	brne	.+56     	; 0x338 <__vector_6+0x1b4>
			   mode = PM;
 300:	80 91 b7 00 	lds	r24, 0x00B7
 304:	88 7f       	andi	r24, 0xF8	; 248
			   hour = 0;
 306:	e7 eb       	ldi	r30, 0xB7	; 183
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	92 91       	ld	r25, -Z
 30c:	9f 70       	andi	r25, 0x0F	; 15
 30e:	90 83       	st	Z, r25
 310:	84 60       	ori	r24, 0x04	; 4
 312:	80 93 b7 00 	sts	0x00B7, r24
 316:	1c c0       	rjmp	.+56     	; 0x350 <__vector_6+0x1cc>
		    }
		    else if(mode == PM && hour == 12){
 318:	94 30       	cpi	r25, 0x04	; 4
 31a:	71 f4       	brne	.+28     	; 0x338 <__vector_6+0x1b4>
 31c:	8c 30       	cpi	r24, 0x0C	; 12
 31e:	61 f4       	brne	.+24     	; 0x338 <__vector_6+0x1b4>
			   mode = AM;
 320:	80 91 b7 00 	lds	r24, 0x00B7
 324:	88 7f       	andi	r24, 0xF8	; 248
			   hour = 0;
 326:	e7 eb       	ldi	r30, 0xB7	; 183
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	92 91       	ld	r25, -Z
 32c:	9f 70       	andi	r25, 0x0F	; 15
 32e:	90 83       	st	Z, r25
 330:	82 60       	ori	r24, 0x02	; 2
 332:	80 93 b7 00 	sts	0x00B7, r24
 336:	0c c0       	rjmp	.+24     	; 0x350 <__vector_6+0x1cc>
		    }
			if(hour == 24){
 338:	88 31       	cpi	r24, 0x18	; 24
 33a:	51 f4       	brne	.+20     	; 0x350 <__vector_6+0x1cc>
				hour = 0;
 33c:	80 91 b6 00 	lds	r24, 0x00B6
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	80 93 b6 00 	sts	0x00B6, r24
 346:	80 91 b7 00 	lds	r24, 0x00B7
 34a:	8e 7f       	andi	r24, 0xFE	; 254
 34c:	80 93 b7 00 	sts	0x00B7, r24
			}
		}
	}
	// toggle led here
		
	PORTD ^= (1 << 0);
 350:	92 b3       	in	r25, 0x12	; 18
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	89 27       	eor	r24, r25
 356:	82 bb       	out	0x12, r24	; 18
    
	void (*update_time)();
	
	update_time = get_new_time;
	
	update_time();
 358:	0e 94 52 00 	call	0xa4	; 0xa4 <get_new_time>

}
 35c:	af 96       	adiw	r28, 0x2f	; 47
 35e:	de bf       	out	0x3e, r29	; 62
 360:	cd bf       	out	0x3d, r28	; 61
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <initial_clock_value>:
void IntToStr(u8_t number, u8_t *txt){
	txt[0] = number % 10 + 48;
	txt[1] = number / 10 + 48;	
}		

void initial_clock_value(){
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 
 	lcd_sendcmd(clear);
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
	//lcd_sendcmd(0x0c);
	lcd_sendcmd(st_line);
 39a:	80 e8       	ldi	r24, 0x80	; 128
 39c:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
	lcd_sendstat((u8_t*)"Setting Time :");
 3a0:	8a e9       	ldi	r24, 0x9A	; 154
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <lcd_sendstat>
	lcd_sendcmd(nd_line);
 3a8:	80 ec       	ldi	r24, 0xC0	; 192
 3aa:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
    //S8_t p;
	do {
		keypad_click();
		if (push == up)
		mode++;
 3ae:	c7 eb       	ldi	r28, 0xB7	; 183
 3b0:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_sendcmd(st_line);
	lcd_sendstat((u8_t*)"Setting Time :");
	lcd_sendcmd(nd_line);
    //S8_t p;
	do {
		keypad_click();
 3b2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <keypad_click>
		if (push == up)
 3b6:	80 91 b3 00 	lds	r24, 0x00B3
 3ba:	84 33       	cpi	r24, 0x34	; 52
 3bc:	49 f4       	brne	.+18     	; 0x3d0 <initial_clock_value+0x48>
		mode++;
 3be:	88 81       	ld	r24, Y
 3c0:	98 2f       	mov	r25, r24
 3c2:	96 95       	lsr	r25
 3c4:	9f 5f       	subi	r25, 0xFF	; 255
 3c6:	93 70       	andi	r25, 0x03	; 3
 3c8:	99 0f       	add	r25, r25
 3ca:	89 7f       	andi	r24, 0xF9	; 249
 3cc:	89 2b       	or	r24, r25
 3ce:	88 83       	st	Y, r24

		if (mode == 0)
 3d0:	88 81       	ld	r24, Y
 3d2:	86 70       	andi	r24, 0x06	; 6
 3d4:	21 f4       	brne	.+8      	; 0x3de <initial_clock_value+0x56>
		mode = 1;
 3d6:	88 81       	ld	r24, Y
 3d8:	89 7f       	andi	r24, 0xF9	; 249
 3da:	82 60       	ori	r24, 0x02	; 2
 3dc:	88 83       	st	Y, r24


		get_new_time();
 3de:	0e 94 52 00 	call	0xa4	; 0xa4 <get_new_time>
	} while(push != '7');
 3e2:	80 91 b3 00 	lds	r24, 0x00B3
 3e6:	87 33       	cpi	r24, 0x37	; 55
 3e8:	21 f7       	brne	.-56     	; 0x3b2 <initial_clock_value+0x2a>
	
	do {
		keypad_click();
		if (push == up)
		second++;
 3ea:	c5 eb       	ldi	r28, 0xB5	; 181
 3ec:	d0 e0       	ldi	r29, 0x00	; 0

		get_new_time();
	} while(push != '7');
	
	do {
		keypad_click();
 3ee:	0e 94 51 04 	call	0x8a2	; 0x8a2 <keypad_click>
		if (push == up)
 3f2:	80 91 b3 00 	lds	r24, 0x00B3
 3f6:	84 33       	cpi	r24, 0x34	; 52
 3f8:	41 f4       	brne	.+16     	; 0x40a <initial_clock_value+0x82>
		second++;
 3fa:	88 81       	ld	r24, Y
 3fc:	98 2f       	mov	r25, r24
 3fe:	9f 5f       	subi	r25, 0xFF	; 255
 400:	9f 73       	andi	r25, 0x3F	; 63
 402:	80 7c       	andi	r24, 0xC0	; 192
 404:	89 2b       	or	r24, r25
 406:	88 83       	st	Y, r24
 408:	09 c0       	rjmp	.+18     	; 0x41c <initial_clock_value+0x94>
		if (push == down)
 40a:	85 33       	cpi	r24, 0x35	; 53
 40c:	39 f4       	brne	.+14     	; 0x41c <initial_clock_value+0x94>
		second--;
 40e:	88 81       	ld	r24, Y
 410:	98 2f       	mov	r25, r24
 412:	91 5c       	subi	r25, 0xC1	; 193
 414:	9f 73       	andi	r25, 0x3F	; 63
 416:	80 7c       	andi	r24, 0xC0	; 192
 418:	89 2b       	or	r24, r25
 41a:	88 83       	st	Y, r24
		if (second == 60)
 41c:	88 81       	ld	r24, Y
 41e:	8f 73       	andi	r24, 0x3F	; 63
 420:	8c 33       	cpi	r24, 0x3C	; 60
 422:	19 f4       	brne	.+6      	; 0x42a <initial_clock_value+0xa2>
		second = 0;
 424:	88 81       	ld	r24, Y
 426:	80 7c       	andi	r24, 0xC0	; 192
 428:	88 83       	st	Y, r24
		if (second == 63)
 42a:	88 81       	ld	r24, Y
 42c:	8f 73       	andi	r24, 0x3F	; 63
 42e:	8f 33       	cpi	r24, 0x3F	; 63
 430:	21 f4       	brne	.+8      	; 0x43a <initial_clock_value+0xb2>
		second = 59;
 432:	88 81       	ld	r24, Y
 434:	80 7c       	andi	r24, 0xC0	; 192
 436:	8b 63       	ori	r24, 0x3B	; 59
 438:	88 83       	st	Y, r24
		get_new_time();
 43a:	0e 94 52 00 	call	0xa4	; 0xa4 <get_new_time>
	} while(push != '7');
 43e:	80 91 b3 00 	lds	r24, 0x00B3
 442:	87 33       	cpi	r24, 0x37	; 55
 444:	a1 f6       	brne	.-88     	; 0x3ee <initial_clock_value+0x66>

	do {
		keypad_click();
		if (push == up)
		minute++;
 446:	c5 eb       	ldi	r28, 0xB5	; 181
 448:	d0 e0       	ldi	r29, 0x00	; 0
 44a:	8e 01       	movw	r16, r28
 44c:	0f 5f       	subi	r16, 0xFF	; 255
 44e:	1f 4f       	sbci	r17, 0xFF	; 255
		second = 59;
		get_new_time();
	} while(push != '7');

	do {
		keypad_click();
 450:	0e 94 51 04 	call	0x8a2	; 0x8a2 <keypad_click>
		if (push == up)
 454:	80 91 b3 00 	lds	r24, 0x00B3
 458:	84 33       	cpi	r24, 0x34	; 52
 45a:	f1 f4       	brne	.+60     	; 0x498 <__stack+0x39>
		minute++;
 45c:	98 81       	ld	r25, Y
 45e:	39 2f       	mov	r19, r25
 460:	32 95       	swap	r19
 462:	36 95       	lsr	r19
 464:	36 95       	lsr	r19
 466:	33 70       	andi	r19, 0x03	; 3
 468:	f8 01       	movw	r30, r16
 46a:	80 81       	ld	r24, Z
 46c:	28 2f       	mov	r18, r24
 46e:	2f 70       	andi	r18, 0x0F	; 15
 470:	22 0f       	add	r18, r18
 472:	22 0f       	add	r18, r18
 474:	23 2b       	or	r18, r19
 476:	2f 5f       	subi	r18, 0xFF	; 255
 478:	32 2f       	mov	r19, r18
 47a:	3f 73       	andi	r19, 0x3F	; 63
 47c:	22 95       	swap	r18
 47e:	22 0f       	add	r18, r18
 480:	22 0f       	add	r18, r18
 482:	20 7c       	andi	r18, 0xC0	; 192
 484:	9f 73       	andi	r25, 0x3F	; 63
 486:	92 2b       	or	r25, r18
 488:	98 83       	st	Y, r25
 48a:	93 2f       	mov	r25, r19
 48c:	96 95       	lsr	r25
 48e:	96 95       	lsr	r25
 490:	80 7f       	andi	r24, 0xF0	; 240
 492:	89 2b       	or	r24, r25
 494:	80 83       	st	Z, r24
 496:	1f c0       	rjmp	.+62     	; 0x4d6 <__stack+0x77>
		if (push == down)
 498:	85 33       	cpi	r24, 0x35	; 53
 49a:	e9 f4       	brne	.+58     	; 0x4d6 <__stack+0x77>
		minute--;
 49c:	98 81       	ld	r25, Y
 49e:	39 2f       	mov	r19, r25
 4a0:	32 95       	swap	r19
 4a2:	36 95       	lsr	r19
 4a4:	36 95       	lsr	r19
 4a6:	33 70       	andi	r19, 0x03	; 3
 4a8:	f8 01       	movw	r30, r16
 4aa:	80 81       	ld	r24, Z
 4ac:	28 2f       	mov	r18, r24
 4ae:	2f 70       	andi	r18, 0x0F	; 15
 4b0:	22 0f       	add	r18, r18
 4b2:	22 0f       	add	r18, r18
 4b4:	23 2b       	or	r18, r19
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	32 2f       	mov	r19, r18
 4ba:	3f 73       	andi	r19, 0x3F	; 63
 4bc:	22 95       	swap	r18
 4be:	22 0f       	add	r18, r18
 4c0:	22 0f       	add	r18, r18
 4c2:	20 7c       	andi	r18, 0xC0	; 192
 4c4:	9f 73       	andi	r25, 0x3F	; 63
 4c6:	92 2b       	or	r25, r18
 4c8:	98 83       	st	Y, r25
 4ca:	93 2f       	mov	r25, r19
 4cc:	96 95       	lsr	r25
 4ce:	96 95       	lsr	r25
 4d0:	80 7f       	andi	r24, 0xF0	; 240
 4d2:	89 2b       	or	r24, r25
 4d4:	80 83       	st	Z, r24
		if (minute == 60)
 4d6:	98 81       	ld	r25, Y
 4d8:	92 95       	swap	r25
 4da:	96 95       	lsr	r25
 4dc:	96 95       	lsr	r25
 4de:	93 70       	andi	r25, 0x03	; 3
 4e0:	f8 01       	movw	r30, r16
 4e2:	80 81       	ld	r24, Z
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	88 0f       	add	r24, r24
 4e8:	88 0f       	add	r24, r24
 4ea:	89 2b       	or	r24, r25
 4ec:	8c 33       	cpi	r24, 0x3C	; 60
 4ee:	39 f4       	brne	.+14     	; 0x4fe <__stack+0x9f>
		minute = 0;
 4f0:	88 81       	ld	r24, Y
 4f2:	8f 73       	andi	r24, 0x3F	; 63
 4f4:	88 83       	st	Y, r24
 4f6:	80 81       	ld	r24, Z
 4f8:	80 7f       	andi	r24, 0xF0	; 240
 4fa:	80 83       	st	Z, r24
 4fc:	0a c0       	rjmp	.+20     	; 0x512 <__stack+0xb3>
		if (minute == 63)
 4fe:	8f 33       	cpi	r24, 0x3F	; 63
 500:	41 f4       	brne	.+16     	; 0x512 <__stack+0xb3>
		minute = 59;
 502:	88 81       	ld	r24, Y
 504:	80 6c       	ori	r24, 0xC0	; 192
 506:	88 83       	st	Y, r24
 508:	f8 01       	movw	r30, r16
 50a:	80 81       	ld	r24, Z
 50c:	80 7f       	andi	r24, 0xF0	; 240
 50e:	8e 60       	ori	r24, 0x0E	; 14
 510:	80 83       	st	Z, r24
		get_new_time();
 512:	0e 94 52 00 	call	0xa4	; 0xa4 <get_new_time>
	} while(push != '7');
 516:	80 91 b3 00 	lds	r24, 0x00B3
 51a:	87 33       	cpi	r24, 0x37	; 55
 51c:	09 f0       	breq	.+2      	; 0x520 <__stack+0xc1>
 51e:	98 cf       	rjmp	.-208    	; 0x450 <initial_clock_value+0xc8>

	do {
		keypad_click();
		if (push == up)
		hour++;
 520:	c6 eb       	ldi	r28, 0xB6	; 182
 522:	d0 e0       	ldi	r29, 0x00	; 0
 524:	8e 01       	movw	r16, r28
 526:	0f 5f       	subi	r16, 0xFF	; 255
 528:	1f 4f       	sbci	r17, 0xFF	; 255
		if (push == down)
		hour--;
		
		if (mode == 3){
 52a:	0f 2e       	mov	r0, r31
 52c:	f7 eb       	ldi	r31, 0xB7	; 183
 52e:	ef 2e       	mov	r14, r31
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	ff 2e       	mov	r15, r31
 534:	f0 2d       	mov	r31, r0
		minute = 59;
		get_new_time();
	} while(push != '7');

	do {
		keypad_click();
 536:	0e 94 51 04 	call	0x8a2	; 0x8a2 <keypad_click>
		if (push == up)
 53a:	80 91 b3 00 	lds	r24, 0x00B3
 53e:	84 33       	cpi	r24, 0x34	; 52
 540:	d1 f4       	brne	.+52     	; 0x576 <__stack+0x117>
		hour++;
 542:	98 81       	ld	r25, Y
 544:	39 2f       	mov	r19, r25
 546:	32 95       	swap	r19
 548:	3f 70       	andi	r19, 0x0F	; 15
 54a:	f8 01       	movw	r30, r16
 54c:	80 81       	ld	r24, Z
 54e:	28 2f       	mov	r18, r24
 550:	21 70       	andi	r18, 0x01	; 1
 552:	22 95       	swap	r18
 554:	20 7f       	andi	r18, 0xF0	; 240
 556:	23 2b       	or	r18, r19
 558:	2f 5f       	subi	r18, 0xFF	; 255
 55a:	32 2f       	mov	r19, r18
 55c:	3f 71       	andi	r19, 0x1F	; 31
 55e:	22 95       	swap	r18
 560:	20 7f       	andi	r18, 0xF0	; 240
 562:	9f 70       	andi	r25, 0x0F	; 15
 564:	92 2b       	or	r25, r18
 566:	98 83       	st	Y, r25
 568:	93 2f       	mov	r25, r19
 56a:	92 95       	swap	r25
 56c:	9f 70       	andi	r25, 0x0F	; 15
 56e:	8e 7f       	andi	r24, 0xFE	; 254
 570:	89 2b       	or	r24, r25
 572:	80 83       	st	Z, r24
 574:	1b c0       	rjmp	.+54     	; 0x5ac <__stack+0x14d>
		if (push == down)
 576:	85 33       	cpi	r24, 0x35	; 53
 578:	c9 f4       	brne	.+50     	; 0x5ac <__stack+0x14d>
		hour--;
 57a:	98 81       	ld	r25, Y
 57c:	39 2f       	mov	r19, r25
 57e:	32 95       	swap	r19
 580:	3f 70       	andi	r19, 0x0F	; 15
 582:	f8 01       	movw	r30, r16
 584:	80 81       	ld	r24, Z
 586:	28 2f       	mov	r18, r24
 588:	21 70       	andi	r18, 0x01	; 1
 58a:	22 95       	swap	r18
 58c:	20 7f       	andi	r18, 0xF0	; 240
 58e:	23 2b       	or	r18, r19
 590:	21 50       	subi	r18, 0x01	; 1
 592:	32 2f       	mov	r19, r18
 594:	3f 71       	andi	r19, 0x1F	; 31
 596:	22 95       	swap	r18
 598:	20 7f       	andi	r18, 0xF0	; 240
 59a:	9f 70       	andi	r25, 0x0F	; 15
 59c:	92 2b       	or	r25, r18
 59e:	98 83       	st	Y, r25
 5a0:	93 2f       	mov	r25, r19
 5a2:	92 95       	swap	r25
 5a4:	9f 70       	andi	r25, 0x0F	; 15
 5a6:	8e 7f       	andi	r24, 0xFE	; 254
 5a8:	89 2b       	or	r24, r25
 5aa:	80 83       	st	Z, r24
		
		if (mode == 3){
 5ac:	f7 01       	movw	r30, r14
 5ae:	80 81       	ld	r24, Z
 5b0:	86 70       	andi	r24, 0x06	; 6
 5b2:	86 30       	cpi	r24, 0x06	; 6
 5b4:	e1 f4       	brne	.+56     	; 0x5ee <__stack+0x18f>
			if (hour == 24)
 5b6:	98 81       	ld	r25, Y
 5b8:	92 95       	swap	r25
 5ba:	9f 70       	andi	r25, 0x0F	; 15
 5bc:	f8 01       	movw	r30, r16
 5be:	80 81       	ld	r24, Z
 5c0:	81 70       	andi	r24, 0x01	; 1
 5c2:	82 95       	swap	r24
 5c4:	80 7f       	andi	r24, 0xF0	; 240
 5c6:	89 2b       	or	r24, r25
 5c8:	88 31       	cpi	r24, 0x18	; 24
 5ca:	39 f4       	brne	.+14     	; 0x5da <__stack+0x17b>
			hour = 0;
 5cc:	88 81       	ld	r24, Y
 5ce:	8f 70       	andi	r24, 0x0F	; 15
 5d0:	88 83       	st	Y, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	8e 7f       	andi	r24, 0xFE	; 254
 5d6:	80 83       	st	Z, r24
 5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__stack+0x18f>
			if (hour == 31)
 5da:	8f 31       	cpi	r24, 0x1F	; 31
 5dc:	41 f4       	brne	.+16     	; 0x5ee <__stack+0x18f>
			hour = 23;
 5de:	88 81       	ld	r24, Y
 5e0:	8f 70       	andi	r24, 0x0F	; 15
 5e2:	80 67       	ori	r24, 0x70	; 112
 5e4:	88 83       	st	Y, r24
 5e6:	f8 01       	movw	r30, r16
 5e8:	80 81       	ld	r24, Z
 5ea:	81 60       	ori	r24, 0x01	; 1
 5ec:	80 83       	st	Z, r24
		}
		if (mode == 1 || mode == 2){
 5ee:	f7 01       	movw	r30, r14
 5f0:	80 81       	ld	r24, Z
 5f2:	86 70       	andi	r24, 0x06	; 6
 5f4:	82 30       	cpi	r24, 0x02	; 2
 5f6:	11 f0       	breq	.+4      	; 0x5fc <__stack+0x19d>
 5f8:	84 30       	cpi	r24, 0x04	; 4
 5fa:	e1 f4       	brne	.+56     	; 0x634 <__stack+0x1d5>
			if (hour == 12)
 5fc:	98 81       	ld	r25, Y
 5fe:	92 95       	swap	r25
 600:	9f 70       	andi	r25, 0x0F	; 15
 602:	f8 01       	movw	r30, r16
 604:	80 81       	ld	r24, Z
 606:	81 70       	andi	r24, 0x01	; 1
 608:	82 95       	swap	r24
 60a:	80 7f       	andi	r24, 0xF0	; 240
 60c:	89 2b       	or	r24, r25
 60e:	8c 30       	cpi	r24, 0x0C	; 12
 610:	39 f4       	brne	.+14     	; 0x620 <__stack+0x1c1>
			hour = 0;
 612:	88 81       	ld	r24, Y
 614:	8f 70       	andi	r24, 0x0F	; 15
 616:	88 83       	st	Y, r24
 618:	80 81       	ld	r24, Z
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	80 83       	st	Z, r24
 61e:	0a c0       	rjmp	.+20     	; 0x634 <__stack+0x1d5>
			if (hour == 31)
 620:	8f 31       	cpi	r24, 0x1F	; 31
 622:	41 f4       	brne	.+16     	; 0x634 <__stack+0x1d5>
			hour = 11;
 624:	88 81       	ld	r24, Y
 626:	8f 70       	andi	r24, 0x0F	; 15
 628:	80 6b       	ori	r24, 0xB0	; 176
 62a:	88 83       	st	Y, r24
 62c:	f8 01       	movw	r30, r16
 62e:	80 81       	ld	r24, Z
 630:	8e 7f       	andi	r24, 0xFE	; 254
 632:	80 83       	st	Z, r24
		}
		get_new_time();
 634:	0e 94 52 00 	call	0xa4	; 0xa4 <get_new_time>
	} while(push != '7');	
 638:	80 91 b3 00 	lds	r24, 0x00B3
 63c:	87 33       	cpi	r24, 0x37	; 55
 63e:	09 f0       	breq	.+2      	; 0x642 <__stack+0x1e3>
 640:	7a cf       	rjmp	.-268    	; 0x536 <__stack+0xd7>
}
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	ff 90       	pop	r15
 64c:	ef 90       	pop	r14
 64e:	08 95       	ret

00000650 <timer1_second_init>:

void timer1_second_init(){
	TCCR1B |= (1 << WGM12)|(1 << CS12);
 650:	8e b5       	in	r24, 0x2e	; 46
 652:	8c 60       	ori	r24, 0x0C	; 12
 654:	8e bd       	out	0x2e, r24	; 46

	// initialize compare value
	OCR1A = 46875;
 656:	8b e1       	ldi	r24, 0x1B	; 27
 658:	97 eb       	ldi	r25, 0xB7	; 183
 65a:	9b bd       	out	0x2b, r25	; 43
 65c:	8a bd       	out	0x2a, r24	; 42
	
	// enable compare interrupt
	TIMSK |= (1 << OCIE1A);
 65e:	89 b7       	in	r24, 0x39	; 57
 660:	80 61       	ori	r24, 0x10	; 16
 662:	89 bf       	out	0x39, r24	; 57
	
	// enable global interrupts
	sei();
 664:	78 94       	sei
}
 666:	08 95       	ret

00000668 <main>:

extern S8_t push;

int main(void)
{
	DDRD |= 1;  // led toggle every 1 second
 668:	88 9a       	sbi	0x11, 0	; 17
	
	keypad_init();
 66a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <keypad_init>

	lcd_init();
 66e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_init>

	lcd_sendcmd(clear);
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>

	initial_clock_value();
 678:	0e 94 c4 01 	call	0x388	; 0x388 <initial_clock_value>

	timer1_second_init();
 67c:	0e 94 28 03 	call	0x650	; 0x650 <timer1_second_init>
			second = eeprom_read(0);
			minute = eeprom_read(1);
			hour   = eeprom_read(2);
		}
		else if (push == store){
			eeprom_write(second,0);
 680:	c5 eb       	ldi	r28, 0xB5	; 181
 682:	d0 e0       	ldi	r29, 0x00	; 0
			eeprom_write(minute,1);
 684:	8e 01       	movw	r16, r28
 686:	0f 5f       	subi	r16, 0xFF	; 255
 688:	1f 4f       	sbci	r17, 0xFF	; 255
			eeprom_write(hour,2);
 68a:	ee 24       	eor	r14, r14
 68c:	ff 24       	eor	r15, r15
 68e:	68 94       	set
 690:	e1 f8       	bld	r14, 1
 692:	ec 0e       	add	r14, r28
 694:	fd 1e       	adc	r15, r29

	timer1_second_init();
    
	while(1)
	{
		keypad_click();
 696:	0e 94 51 04 	call	0x8a2	; 0x8a2 <keypad_click>
		if (push == stop_start){
 69a:	80 91 b3 00 	lds	r24, 0x00B3
 69e:	86 33       	cpi	r24, 0x36	; 54
 6a0:	21 f4       	brne	.+8      	; 0x6aa <main+0x42>
			CLRBIT(TCCR1B,CS12);
 6a2:	8e b5       	in	r24, 0x2e	; 46
 6a4:	8b 7f       	andi	r24, 0xFB	; 251
 6a6:	8e bd       	out	0x2e, r24	; 46
 6a8:	f6 cf       	rjmp	.-20     	; 0x696 <main+0x2e>
		}
		else if (push == '3'){
 6aa:	83 33       	cpi	r24, 0x33	; 51
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <main+0x4e>
			SETBIT(TCCR1B,CS12);
 6ae:	8e b5       	in	r24, 0x2e	; 46
 6b0:	84 60       	ori	r24, 0x04	; 4
 6b2:	8e bd       	out	0x2e, r24	; 46
 6b4:	f0 cf       	rjmp	.-32     	; 0x696 <main+0x2e>
		}
		else if (push == CLR){
 6b6:	87 33       	cpi	r24, 0x37	; 55
 6b8:	41 f4       	brne	.+16     	; 0x6ca <main+0x62>
			second = 0;
			minute = 0;
 6ba:	18 82       	st	Y, r1
			hour = 0;
 6bc:	f8 01       	movw	r30, r16
 6be:	10 82       	st	Z, r1
 6c0:	f7 01       	movw	r30, r14
 6c2:	80 81       	ld	r24, Z
 6c4:	8e 7f       	andi	r24, 0xFE	; 254
 6c6:	80 83       	st	Z, r24
 6c8:	e6 cf       	rjmp	.-52     	; 0x696 <main+0x2e>
		}
		else if (push == set_timer){
 6ca:	88 33       	cpi	r24, 0x38	; 56
 6cc:	61 f4       	brne	.+24     	; 0x6e6 <main+0x7e>
			CLRBIT(TCCR1B,CS12);
 6ce:	8e b5       	in	r24, 0x2e	; 46
 6d0:	8b 7f       	andi	r24, 0xFB	; 251
 6d2:	8e bd       	out	0x2e, r24	; 46
			lcd_sendcmd(clear);
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
			initial_clock_value();
 6da:	0e 94 c4 01 	call	0x388	; 0x388 <initial_clock_value>
			SETBIT(TCCR1B,CS12);
 6de:	8e b5       	in	r24, 0x2e	; 46
 6e0:	84 60       	ori	r24, 0x04	; 4
 6e2:	8e bd       	out	0x2e, r24	; 46
 6e4:	d8 cf       	rjmp	.-80     	; 0x696 <main+0x2e>
		}
		else if (push == restore){
 6e6:	82 33       	cpi	r24, 0x32	; 50
 6e8:	99 f5       	brne	.+102    	; 0x750 <main+0xe8>
			second = eeprom_read(0);
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 d7 03 	call	0x7ae	; 0x7ae <eeprom_read>
 6f2:	8f 73       	andi	r24, 0x3F	; 63
 6f4:	98 81       	ld	r25, Y
 6f6:	90 7c       	andi	r25, 0xC0	; 192
 6f8:	89 2b       	or	r24, r25
 6fa:	88 83       	st	Y, r24
			minute = eeprom_read(1);
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 d7 03 	call	0x7ae	; 0x7ae <eeprom_read>
 704:	28 2f       	mov	r18, r24
 706:	22 95       	swap	r18
 708:	22 0f       	add	r18, r18
 70a:	22 0f       	add	r18, r18
 70c:	20 7c       	andi	r18, 0xC0	; 192
 70e:	98 81       	ld	r25, Y
 710:	9f 73       	andi	r25, 0x3F	; 63
 712:	92 2b       	or	r25, r18
 714:	98 83       	st	Y, r25
 716:	86 95       	lsr	r24
 718:	86 95       	lsr	r24
 71a:	8f 70       	andi	r24, 0x0F	; 15
 71c:	f8 01       	movw	r30, r16
 71e:	90 81       	ld	r25, Z
 720:	90 7f       	andi	r25, 0xF0	; 240
 722:	89 2b       	or	r24, r25
 724:	80 83       	st	Z, r24
			hour   = eeprom_read(2);
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <eeprom_read>
 72e:	28 2f       	mov	r18, r24
 730:	22 95       	swap	r18
 732:	20 7f       	andi	r18, 0xF0	; 240
 734:	f8 01       	movw	r30, r16
 736:	90 81       	ld	r25, Z
 738:	9f 70       	andi	r25, 0x0F	; 15
 73a:	92 2b       	or	r25, r18
 73c:	90 83       	st	Z, r25
 73e:	82 95       	swap	r24
 740:	8f 70       	andi	r24, 0x0F	; 15
 742:	81 70       	andi	r24, 0x01	; 1
 744:	f7 01       	movw	r30, r14
 746:	90 81       	ld	r25, Z
 748:	9e 7f       	andi	r25, 0xFE	; 254
 74a:	89 2b       	or	r24, r25
 74c:	80 83       	st	Z, r24
 74e:	a3 cf       	rjmp	.-186    	; 0x696 <main+0x2e>
		}
		else if (push == store){
 750:	81 33       	cpi	r24, 0x31	; 49
 752:	09 f0       	breq	.+2      	; 0x756 <main+0xee>
 754:	a0 cf       	rjmp	.-192    	; 0x696 <main+0x2e>
			eeprom_write(second,0);
 756:	88 81       	ld	r24, Y
 758:	8f 73       	andi	r24, 0x3F	; 63
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	0e 94 cf 03 	call	0x79e	; 0x79e <eeprom_write>
			eeprom_write(minute,1);
 762:	98 81       	ld	r25, Y
 764:	92 95       	swap	r25
 766:	96 95       	lsr	r25
 768:	96 95       	lsr	r25
 76a:	93 70       	andi	r25, 0x03	; 3
 76c:	f8 01       	movw	r30, r16
 76e:	80 81       	ld	r24, Z
 770:	8f 70       	andi	r24, 0x0F	; 15
 772:	88 0f       	add	r24, r24
 774:	88 0f       	add	r24, r24
 776:	89 2b       	or	r24, r25
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	0e 94 cf 03 	call	0x79e	; 0x79e <eeprom_write>
			eeprom_write(hour,2);
 780:	f8 01       	movw	r30, r16
 782:	90 81       	ld	r25, Z
 784:	92 95       	swap	r25
 786:	9f 70       	andi	r25, 0x0F	; 15
 788:	f7 01       	movw	r30, r14
 78a:	80 81       	ld	r24, Z
 78c:	81 70       	andi	r24, 0x01	; 1
 78e:	82 95       	swap	r24
 790:	80 7f       	andi	r24, 0xF0	; 240
 792:	89 2b       	or	r24, r25
 794:	62 e0       	ldi	r22, 0x02	; 2
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	0e 94 cf 03 	call	0x79e	; 0x79e <eeprom_write>
 79c:	7c cf       	rjmp	.-264    	; 0x696 <main+0x2e>

0000079e <eeprom_write>:
#define clrbit(a,b)  a &= ~(1 << b)
#define togbit(a,b)  a ^= 1 << b
#define rd_bit(a,b)  (a & (1 << b))

void eeprom_write(unsigned char data,unsigned int addr ){
	while(rd_bit(EECR,1));
 79e:	e1 99       	sbic	0x1c, 1	; 28
 7a0:	fe cf       	rjmp	.-4      	; 0x79e <eeprom_write>
	EEAR = addr;
 7a2:	7f bb       	out	0x1f, r23	; 31
 7a4:	6e bb       	out	0x1e, r22	; 30
	EEDR = data;
 7a6:	8d bb       	out	0x1d, r24	; 29
	setbit(EECR,2);  // protection to eeprom
 7a8:	e2 9a       	sbi	0x1c, 2	; 28
	setbit(EECR,1);
 7aa:	e1 9a       	sbi	0x1c, 1	; 28
}
 7ac:	08 95       	ret

000007ae <eeprom_read>:

unsigned char eeprom_read(unsigned int addr ){
	while(rd_bit(EECR,1));
 7ae:	e1 99       	sbic	0x1c, 1	; 28
 7b0:	fe cf       	rjmp	.-4      	; 0x7ae <eeprom_read>
	EEAR = addr;
 7b2:	9f bb       	out	0x1f, r25	; 31
 7b4:	8e bb       	out	0x1e, r24	; 30
	setbit(EECR,0);
 7b6:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
 7b8:	8d b3       	in	r24, 0x1d	; 29

}
 7ba:	08 95       	ret

000007bc <check_count>:
int check_count(unsigned char counter){
	if(counter == 100)
 7bc:	84 36       	cpi	r24, 0x64	; 100
 7be:	21 f0       	breq	.+8      	; 0x7c8 <check_count+0xc>
	return 0;
	if(counter == 255)
 7c0:	8f 3f       	cpi	r24, 0xFF	; 255
 7c2:	29 f0       	breq	.+10     	; 0x7ce <check_count+0x12>
	return 99;
	return counter;
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	08 95       	ret
	return EEDR;

}
int check_count(unsigned char counter){
	if(counter == 100)
	return 0;
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	08 95       	ret
	if(counter == 255)
	return 99;
 7ce:	83 e6       	ldi	r24, 0x63	; 99
 7d0:	90 e0       	ldi	r25, 0x00	; 0
	return counter;
}
 7d2:	08 95       	ret

000007d4 <seven_seg>:

void seven_seg(unsigned char counter){
	unsigned char temp;
	
	temp = counter % 10;
 7d4:	6a e0       	ldi	r22, 0x0A	; 10
 7d6:	0e 94 0c 05 	call	0xa18	; 0xa18 <__udivmodqi4>
	setbit(temp,4);
	clrbit(temp,5);
 7da:	90 61       	ori	r25, 0x10	; 16
	PORTC = temp;
 7dc:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7de:	e7 eb       	ldi	r30, 0xB7	; 183
 7e0:	fb e0       	ldi	r31, 0x0B	; 11
 7e2:	31 97       	sbiw	r30, 0x01	; 1
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <seven_seg+0xe>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <seven_seg+0x14>
 7e8:	00 00       	nop
	
	_delay_ms(1);
	
	temp = counter / 10;
	setbit(temp,5);
 7ea:	80 62       	ori	r24, 0x20	; 32
	clrbit(temp,4);
 7ec:	8f 7e       	andi	r24, 0xEF	; 239
	PORTC = temp;
 7ee:	85 bb       	out	0x15, r24	; 21
 7f0:	87 eb       	ldi	r24, 0xB7	; 183
 7f2:	9b e0       	ldi	r25, 0x0B	; 11
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <seven_seg+0x20>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <seven_seg+0x26>
 7fa:	00 00       	nop
	
	_delay_ms(1);
}
 7fc:	08 95       	ret

000007fe <keypad_init>:
	'4','5','6',
	'7','8','9',
};

void keypad_init(){
	mykeypadport
 7fe:	81 b3       	in	r24, 0x11	; 17
 800:	8c 61       	ori	r24, 0x1C	; 28
 802:	81 bb       	out	0x11, r24	; 17
	pullup
 804:	80 ee       	ldi	r24, 0xE0	; 224
 806:	82 bb       	out	0x12, r24	; 18
}
 808:	08 95       	ret

0000080a <press>:

S8_t press(S8_t i){

	if(!k4 ){
 80a:	85 99       	sbic	0x10, 5	; 16
 80c:	0d c0       	rjmp	.+26     	; 0x828 <press+0x1e>
	return keypad_matrix[0+i*3];
 80e:	99 27       	eor	r25, r25
 810:	87 fd       	sbrc	r24, 7
 812:	90 95       	com	r25
 814:	fc 01       	movw	r30, r24
 816:	ee 0f       	add	r30, r30
 818:	ff 1f       	adc	r31, r31
 81a:	8e 0f       	add	r24, r30
 81c:	9f 1f       	adc	r25, r31
 81e:	fc 01       	movw	r30, r24
 820:	e7 55       	subi	r30, 0x57	; 87
 822:	ff 4f       	sbci	r31, 0xFF	; 255
 824:	80 81       	ld	r24, Z
 826:	08 95       	ret
	}
	
	if(!k5 ){
 828:	86 99       	sbic	0x10, 6	; 16
 82a:	0d c0       	rjmp	.+26     	; 0x846 <press+0x3c>
	return keypad_matrix[1+i*3];
 82c:	99 27       	eor	r25, r25
 82e:	87 fd       	sbrc	r24, 7
 830:	90 95       	com	r25
 832:	fc 01       	movw	r30, r24
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	8e 0f       	add	r24, r30
 83a:	9f 1f       	adc	r25, r31
 83c:	fc 01       	movw	r30, r24
 83e:	e7 55       	subi	r30, 0x57	; 87
 840:	ff 4f       	sbci	r31, 0xFF	; 255
 842:	81 81       	ldd	r24, Z+1	; 0x01
 844:	08 95       	ret
	}
	
	if(!k6){
 846:	87 99       	sbic	0x10, 7	; 16
 848:	0d c0       	rjmp	.+26     	; 0x864 <press+0x5a>
	return keypad_matrix[2+i*3];
 84a:	99 27       	eor	r25, r25
 84c:	87 fd       	sbrc	r24, 7
 84e:	90 95       	com	r25
 850:	fc 01       	movw	r30, r24
 852:	ee 0f       	add	r30, r30
 854:	ff 1f       	adc	r31, r31
 856:	8e 0f       	add	r24, r30
 858:	9f 1f       	adc	r25, r31
 85a:	fc 01       	movw	r30, r24
 85c:	e7 55       	subi	r30, 0x57	; 87
 85e:	ff 4f       	sbci	r31, 0xFF	; 255
 860:	82 81       	ldd	r24, Z+2	; 0x02
 862:	08 95       	ret
 864:	8f e2       	ldi	r24, 0x2F	; 47
 866:	95 e7       	ldi	r25, 0x75	; 117
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <press+0x5e>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <press+0x64>
 86e:	00 00       	nop
	}	
	
	_delay_ms(10);
	
	return -1;
 870:	8f ef       	ldi	r24, 0xFF	; 255
}
 872:	08 95       	ret

00000874 <keypad_press>:

S8_t keypad_press(){

    S8_t k;
	
	k1(0);k2(1);k3(1);
 874:	92 98       	cbi	0x12, 2	; 18
 876:	93 9a       	sbi	0x12, 3	; 18
 878:	94 9a       	sbi	0x12, 4	; 18
	k = press(0);
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	0e 94 05 04 	call	0x80a	; 0x80a <press>
	if(k != -1)
 880:	8f 3f       	cpi	r24, 0xFF	; 255
 882:	71 f4       	brne	.+28     	; 0x8a0 <keypad_press+0x2c>
	return k;

	k1(1);k2(0);k3(1);
 884:	92 9a       	sbi	0x12, 2	; 18
 886:	93 98       	cbi	0x12, 3	; 18
 888:	94 9a       	sbi	0x12, 4	; 18
	k = press(1);
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	0e 94 05 04 	call	0x80a	; 0x80a <press>
	if(k != -1)
 890:	8f 3f       	cpi	r24, 0xFF	; 255
 892:	31 f4       	brne	.+12     	; 0x8a0 <keypad_press+0x2c>
	return k;

	k1(1);k2(1);k3(0);
 894:	92 9a       	sbi	0x12, 2	; 18
 896:	93 9a       	sbi	0x12, 3	; 18
 898:	94 98       	cbi	0x12, 4	; 18
	k = press(2);
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	0e 94 05 04 	call	0x80a	; 0x80a <press>
	if(k != -1)
	return k;

	return -1;
}
 8a0:	08 95       	ret

000008a2 <keypad_click>:

void keypad_click(){

	static S8_t k;
	if (keypad_press() != k){
 8a2:	0e 94 3a 04 	call	0x874	; 0x874 <keypad_press>
 8a6:	90 91 b4 00 	lds	r25, 0x00B4
 8aa:	89 17       	cp	r24, r25
 8ac:	39 f0       	breq	.+14     	; 0x8bc <keypad_click+0x1a>
		k = keypad_press();
 8ae:	0e 94 3a 04 	call	0x874	; 0x874 <keypad_press>
 8b2:	80 93 b4 00 	sts	0x00B4, r24
		push = k;
 8b6:	80 93 b3 00 	sts	0x00B3, r24
 8ba:	08 95       	ret
	}
	else
	    push = -1;
 8bc:	8f ef       	ldi	r24, 0xFF	; 255
 8be:	80 93 b3 00 	sts	0x00B3, r24
 8c2:	08 95       	ret

000008c4 <lcd_new_data>:
#define TOGBIT(reg,bit)  reg ^=  (1<<bit)
#define rd_bit(reg,bit)  (reg &  (1<<bit))


void lcd_new_data(){
	EN(1);
 8c4:	df 9a       	sbi	0x1b, 7	; 27
 8c6:	87 eb       	ldi	r24, 0xB7	; 183
 8c8:	9b e0       	ldi	r25, 0x0B	; 11
 8ca:	01 97       	sbiw	r24, 0x01	; 1
 8cc:	f1 f7       	brne	.-4      	; 0x8ca <lcd_new_data+0x6>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <lcd_new_data+0xc>
 8d0:	00 00       	nop
	_delay_ms(1);
	EN(0);
 8d2:	df 98       	cbi	0x1b, 7	; 27
 8d4:	87 eb       	ldi	r24, 0xB7	; 183
 8d6:	9b e0       	ldi	r25, 0x0B	; 11
 8d8:	01 97       	sbiw	r24, 0x01	; 1
 8da:	f1 f7       	brne	.-4      	; 0x8d8 <lcd_new_data+0x14>
 8dc:	00 c0       	rjmp	.+0      	; 0x8de <lcd_new_data+0x1a>
 8de:	00 00       	nop
	_delay_ms(1);
}
 8e0:	08 95       	ret

000008e2 <lcd_reset>:

void lcd_reset(){
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	c3 e0       	ldi	r28, 0x03	; 3
 8e8:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0 ; i < 3; i++){
		
		D7(1);D6(1);D5(1);D4(1);
 8ea:	c7 9a       	sbi	0x18, 7	; 24
 8ec:	c6 9a       	sbi	0x18, 6	; 24
 8ee:	c5 9a       	sbi	0x18, 5	; 24
 8f0:	c4 9a       	sbi	0x18, 4	; 24
 8f2:	8f e5       	ldi	r24, 0x5F	; 95
 8f4:	9a ee       	ldi	r25, 0xEA	; 234
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <lcd_reset+0x14>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <lcd_reset+0x1a>
 8fc:	00 00       	nop
		
		_delay_ms(20);
		
		D7(0);D6(0);D5(1);D4(1);
 8fe:	c7 98       	cbi	0x18, 7	; 24
 900:	c6 98       	cbi	0x18, 6	; 24
 902:	c5 9a       	sbi	0x18, 5	; 24
 904:	c4 9a       	sbi	0x18, 4	; 24
		
		lcd_new_data();
 906:	0e 94 62 04 	call	0x8c4	; 0x8c4 <lcd_new_data>
 90a:	21 97       	sbiw	r28, 0x01	; 1
	EN(0);
	_delay_ms(1);
}

void lcd_reset(){
	for(int i = 0 ; i < 3; i++){
 90c:	71 f7       	brne	.-36     	; 0x8ea <lcd_reset+0x8>
		
		D7(0);D6(0);D5(1);D4(1);
		
		lcd_new_data();
	}
	D7(0);D6(0);D5(1);D4(0);
 90e:	c7 98       	cbi	0x18, 7	; 24
 910:	c6 98       	cbi	0x18, 6	; 24
 912:	c5 9a       	sbi	0x18, 5	; 24
 914:	c4 98       	cbi	0x18, 4	; 24
	
	lcd_new_data();
 916:	0e 94 62 04 	call	0x8c4	; 0x8c4 <lcd_new_data>
}
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	08 95       	ret

00000920 <lcd_read>:
	MyLCDport;
	Rw(0);  
	lcd_init4bitmode();
}

void lcd_read(unsigned char cmd){
 920:	cf 93       	push	r28
	// read first 4 bit
	D7(0); D6(0);D5(0); D4(0);
 922:	c7 98       	cbi	0x18, 7	; 24
 924:	c6 98       	cbi	0x18, 6	; 24
 926:	c5 98       	cbi	0x18, 5	; 24
 928:	c4 98       	cbi	0x18, 4	; 24
	D7(rd_bit(cmd,7));
 92a:	88 23       	and	r24, r24
 92c:	14 f0       	brlt	.+4      	; 0x932 <lcd_read+0x12>
 92e:	c7 98       	cbi	0x18, 7	; 24
 930:	01 c0       	rjmp	.+2      	; 0x934 <lcd_read+0x14>
 932:	c7 9a       	sbi	0x18, 7	; 24
	D6(rd_bit(cmd,6));
 934:	c8 2f       	mov	r28, r24
 936:	86 fd       	sbrc	r24, 6
 938:	02 c0       	rjmp	.+4      	; 0x93e <lcd_read+0x1e>
 93a:	c6 98       	cbi	0x18, 6	; 24
 93c:	01 c0       	rjmp	.+2      	; 0x940 <lcd_read+0x20>
 93e:	c6 9a       	sbi	0x18, 6	; 24
	D5(rd_bit(cmd,5));
 940:	c5 fd       	sbrc	r28, 5
 942:	02 c0       	rjmp	.+4      	; 0x948 <lcd_read+0x28>
 944:	c5 98       	cbi	0x18, 5	; 24
 946:	01 c0       	rjmp	.+2      	; 0x94a <lcd_read+0x2a>
 948:	c5 9a       	sbi	0x18, 5	; 24
	D4(rd_bit(cmd,4));
 94a:	c4 fd       	sbrc	r28, 4
 94c:	02 c0       	rjmp	.+4      	; 0x952 <lcd_read+0x32>
 94e:	c4 98       	cbi	0x18, 4	; 24
 950:	01 c0       	rjmp	.+2      	; 0x954 <lcd_read+0x34>
 952:	c4 9a       	sbi	0x18, 4	; 24

	lcd_new_data();
 954:	0e 94 62 04 	call	0x8c4	; 0x8c4 <lcd_new_data>

	// read second 4 bit
	D7(0); D6(0);D5(0); D4(0);
 958:	c7 98       	cbi	0x18, 7	; 24
 95a:	c6 98       	cbi	0x18, 6	; 24
 95c:	c5 98       	cbi	0x18, 5	; 24
 95e:	c4 98       	cbi	0x18, 4	; 24
	D7(rd_bit(cmd,3));
 960:	c3 fd       	sbrc	r28, 3
 962:	02 c0       	rjmp	.+4      	; 0x968 <lcd_read+0x48>
 964:	c7 98       	cbi	0x18, 7	; 24
 966:	01 c0       	rjmp	.+2      	; 0x96a <lcd_read+0x4a>
 968:	c7 9a       	sbi	0x18, 7	; 24
	D6(rd_bit(cmd,2));
 96a:	c2 fd       	sbrc	r28, 2
 96c:	02 c0       	rjmp	.+4      	; 0x972 <lcd_read+0x52>
 96e:	c6 98       	cbi	0x18, 6	; 24
 970:	01 c0       	rjmp	.+2      	; 0x974 <lcd_read+0x54>
 972:	c6 9a       	sbi	0x18, 6	; 24
	D5(rd_bit(cmd,1));
 974:	c1 fd       	sbrc	r28, 1
 976:	02 c0       	rjmp	.+4      	; 0x97c <lcd_read+0x5c>
 978:	c5 98       	cbi	0x18, 5	; 24
 97a:	01 c0       	rjmp	.+2      	; 0x97e <lcd_read+0x5e>
 97c:	c5 9a       	sbi	0x18, 5	; 24
	D4(rd_bit(cmd,0));
 97e:	c0 fd       	sbrc	r28, 0
 980:	02 c0       	rjmp	.+4      	; 0x986 <lcd_read+0x66>
 982:	c4 98       	cbi	0x18, 4	; 24
 984:	01 c0       	rjmp	.+2      	; 0x988 <lcd_read+0x68>
 986:	c4 9a       	sbi	0x18, 4	; 24

	lcd_new_data();
 988:	0e 94 62 04 	call	0x8c4	; 0x8c4 <lcd_new_data>
}
 98c:	cf 91       	pop	r28
 98e:	08 95       	ret

00000990 <lcd_sendcmd>:


void lcd_sendcmd(unsigned char cmd){
	RS(0); // Rs = 0
 990:	dd 98       	cbi	0x1b, 5	; 27
    lcd_read(cmd);
 992:	0e 94 90 04 	call	0x920	; 0x920 <lcd_read>
}
 996:	08 95       	ret

00000998 <lcd_init4bitmode>:
	
	lcd_new_data();
}

void lcd_init4bitmode(){
	lcd_reset();
 998:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_reset>
 99c:	87 e9       	ldi	r24, 0x97	; 151
 99e:	9a e3       	ldi	r25, 0x3A	; 58
 9a0:	01 97       	sbiw	r24, 0x01	; 1
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <lcd_init4bitmode+0x8>
 9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <lcd_init4bitmode+0xe>
 9a6:	00 00       	nop
	_delay_ms(5);
	lcd_sendcmd(0x28);  // 4data line
 9a8:	88 e2       	ldi	r24, 0x28	; 40
 9aa:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
	lcd_sendcmd(clear);
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
	lcd_sendcmd(0x0c);  // display on cursor off
 9b4:	8c e0       	ldi	r24, 0x0C	; 12
 9b6:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
	lcd_sendcmd(0x06);  // increment cursor right
 9ba:	86 e0       	ldi	r24, 0x06	; 6
 9bc:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
	lcd_sendcmd(0x80);  // set courser at the beginning of the first line
 9c0:	80 e8       	ldi	r24, 0x80	; 128
 9c2:	0e 94 c8 04 	call	0x990	; 0x990 <lcd_sendcmd>
 9c6:	8f e5       	ldi	r24, 0x5F	; 95
 9c8:	9a ee       	ldi	r25, 0xEA	; 234
 9ca:	01 97       	sbiw	r24, 0x01	; 1
 9cc:	f1 f7       	brne	.-4      	; 0x9ca <lcd_init4bitmode+0x32>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <lcd_init4bitmode+0x38>
 9d0:	00 00       	nop
	_delay_ms(20);
}
 9d2:	08 95       	ret

000009d4 <lcd_init>:

void lcd_init(){
	MyLCDport;
 9d4:	87 b3       	in	r24, 0x17	; 23
 9d6:	80 6f       	ori	r24, 0xF0	; 240
 9d8:	87 bb       	out	0x17, r24	; 23
 9da:	8a b3       	in	r24, 0x1a	; 26
 9dc:	80 67       	ori	r24, 0x70	; 112
 9de:	8a bb       	out	0x1a, r24	; 26
	Rw(0);  
 9e0:	de 98       	cbi	0x1b, 6	; 27
	lcd_init4bitmode();
 9e2:	0e 94 cc 04 	call	0x998	; 0x998 <lcd_init4bitmode>
}
 9e6:	08 95       	ret

000009e8 <lcd_senddata>:
	RS(0); // Rs = 0
    lcd_read(cmd);
}

void lcd_senddata(unsigned char cmd){
	RS(1); // Rs = 1
 9e8:	dd 9a       	sbi	0x1b, 5	; 27
    lcd_read(cmd);
 9ea:	0e 94 90 04 	call	0x920	; 0x920 <lcd_read>
}
 9ee:	08 95       	ret

000009f0 <lcd_sendstat>:


void lcd_sendstat(u8_t *x){
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	fc 01       	movw	r30, r24
    for(int i = 0; x[i] != '\0'; i++){
 9f6:	80 81       	ld	r24, Z
 9f8:	88 23       	and	r24, r24
 9fa:	59 f0       	breq	.+22     	; 0xa12 <lcd_sendstat+0x22>
	RS(1); // Rs = 1
    lcd_read(cmd);
}


void lcd_sendstat(u8_t *x){
 9fc:	ef 01       	movw	r28, r30
 9fe:	21 96       	adiw	r28, 0x01	; 1
    for(int i = 0; x[i] != '\0'; i++){
    	RS(1); // Rs = 1
 a00:	dd 9a       	sbi	0x1b, 5	; 27
	    lcd_read(x[i]);
 a02:	80 81       	ld	r24, Z
 a04:	0e 94 90 04 	call	0x920	; 0x920 <lcd_read>
    lcd_read(cmd);
}


void lcd_sendstat(u8_t *x){
    for(int i = 0; x[i] != '\0'; i++){
 a08:	fe 01       	movw	r30, r28
 a0a:	21 96       	adiw	r28, 0x01	; 1
 a0c:	80 81       	ld	r24, Z
 a0e:	88 23       	and	r24, r24
 a10:	b9 f7       	brne	.-18     	; 0xa00 <lcd_sendstat+0x10>
    	RS(1); // Rs = 1
	    lcd_read(x[i]);
	}	
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	08 95       	ret

00000a18 <__udivmodqi4>:
 a18:	99 1b       	sub	r25, r25
 a1a:	79 e0       	ldi	r23, 0x09	; 9
 a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__udivmodqi4_ep>

00000a1e <__udivmodqi4_loop>:
 a1e:	99 1f       	adc	r25, r25
 a20:	96 17       	cp	r25, r22
 a22:	08 f0       	brcs	.+2      	; 0xa26 <__udivmodqi4_ep>
 a24:	96 1b       	sub	r25, r22

00000a26 <__udivmodqi4_ep>:
 a26:	88 1f       	adc	r24, r24
 a28:	7a 95       	dec	r23
 a2a:	c9 f7       	brne	.-14     	; 0xa1e <__udivmodqi4_loop>
 a2c:	80 95       	com	r24
 a2e:	08 95       	ret

00000a30 <_exit>:
 a30:	f8 94       	cli

00000a32 <__stop_program>:
 a32:	ff cf       	rjmp	.-2      	; 0xa32 <__stop_program>
